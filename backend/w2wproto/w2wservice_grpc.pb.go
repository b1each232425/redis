// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: w2wproto/w2wservice.proto

package w2wproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	W2W_Do_FullMethodName    = "/w2wproto.W2W/Do"
	W2W_Shell_FullMethodName = "/w2wproto.W2W/Shell"
)

// W2WClient is the client API for W2W service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type W2WClient interface {
	Do(ctx context.Context, in *Task, opts ...grpc.CallOption) (W2W_DoClient, error)
	Shell(ctx context.Context, opts ...grpc.CallOption) (W2W_ShellClient, error)
}

type w2WClient struct {
	cc grpc.ClientConnInterface
}

func NewW2WClient(cc grpc.ClientConnInterface) W2WClient {
	return &w2WClient{cc}
}

func (c *w2WClient) Do(ctx context.Context, in *Task, opts ...grpc.CallOption) (W2W_DoClient, error) {
	stream, err := c.cc.NewStream(ctx, &W2W_ServiceDesc.Streams[0], W2W_Do_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &w2WDoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type W2W_DoClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type w2WDoClient struct {
	grpc.ClientStream
}

func (x *w2WDoClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *w2WClient) Shell(ctx context.Context, opts ...grpc.CallOption) (W2W_ShellClient, error) {
	stream, err := c.cc.NewStream(ctx, &W2W_ServiceDesc.Streams[1], W2W_Shell_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &w2WShellClient{stream}
	return x, nil
}

type W2W_ShellClient interface {
	Send(*Params) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type w2WShellClient struct {
	grpc.ClientStream
}

func (x *w2WShellClient) Send(m *Params) error {
	return x.ClientStream.SendMsg(m)
}

func (x *w2WShellClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// W2WServer is the server API for W2W service.
// All implementations must embed UnimplementedW2WServer
// for forward compatibility
type W2WServer interface {
	Do(*Task, W2W_DoServer) error
	Shell(W2W_ShellServer) error
	mustEmbedUnimplementedW2WServer()
}

// UnimplementedW2WServer must be embedded to have forward compatible implementations.
type UnimplementedW2WServer struct {
}

func (UnimplementedW2WServer) Do(*Task, W2W_DoServer) error {
	return status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedW2WServer) Shell(W2W_ShellServer) error {
	return status.Errorf(codes.Unimplemented, "method Shell not implemented")
}
func (UnimplementedW2WServer) mustEmbedUnimplementedW2WServer() {}

// UnsafeW2WServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to W2WServer will
// result in compilation errors.
type UnsafeW2WServer interface {
	mustEmbedUnimplementedW2WServer()
}

func RegisterW2WServer(s grpc.ServiceRegistrar, srv W2WServer) {
	s.RegisterService(&W2W_ServiceDesc, srv)
}

func _W2W_Do_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Task)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(W2WServer).Do(m, &w2WDoServer{stream})
}

type W2W_DoServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type w2WDoServer struct {
	grpc.ServerStream
}

func (x *w2WDoServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _W2W_Shell_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(W2WServer).Shell(&w2WShellServer{stream})
}

type W2W_ShellServer interface {
	Send(*Reply) error
	Recv() (*Params, error)
	grpc.ServerStream
}

type w2WShellServer struct {
	grpc.ServerStream
}

func (x *w2WShellServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *w2WShellServer) Recv() (*Params, error) {
	m := new(Params)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// W2W_ServiceDesc is the grpc.ServiceDesc for W2W service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var W2W_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "w2wproto.W2W",
	HandlerType: (*W2WServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Do",
			Handler:       _W2W_Do_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Shell",
			Handler:       _W2W_Shell_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "w2wproto/w2wservice.proto",
}
