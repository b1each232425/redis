syntax = "proto2";
package qproto;
option go_package=".;qproto";

enum messageType
{
  UNKNOWN=0;
  // Cln --> Srv|Cln
  ACTION_STATUS=2;

  USER_LOGIN=4;
  USER_LOGOUT=6;

  REGISTER_USER=8;
  REVOKE_USER=10;

  QUERY_USERLIST=12;
  QUERY_USER=14;
  QUERY_USER_ALIVE=16;

  SYNC=18;
  HEARTBEAT=20;

  CHAT_MSG=22;
  FILE_MSG=24;
  AUDIO_MSG=26;
  VIDEO_MSG=28;

  // 1. tom send PUNCH_REQ_BROKER with alic to broker with
  //    defaultSession;
  // 2. broker send alic's globalEP to tom by ACTION_STATUS using
  //    defaultSession;
  // 3. broker send PUNCH_REQ_PEER to alic with tom's globalEP with
  //    tom's sckSession;
  // 4. tom repeat send PUNCH_REQ to alic's globalEP until receive PUNCH_RESP from alic;
  //    defaultSession;
  // 5. alic repeat send PUNCH_RESP to tom's globalEP until receive PIERCED from tom,
  //    defaultSession;
  // 6. tom send PIERCED to alic when received PUNCH_RESP to confirm success PUNCH,
  //    alic's sckSession;
  // 7. alic received PIERCED then confirm success PUNCH,
  //    tom's sckSession


  //cln->cln
  PUNCH_REQ=30;

  //cln->serv
  PUNCH_REQ_BROKER=34;

  //serv->cln
  PUNCH_REQ_PEER=36;

  //cln->cln
  PUNCH_RESP=38;

  //cln->cln
  PIERCED=40;
  
  PUNCH_PING=42;
  PUNCH_PONG=44;


  //status not used in communication frame type
  PUNCH_INIT=50;
  PUNCHING=52;
  PUNCH_FAILED=54;
  PUNCH_SUCCESS=56;

  QUERY_RESOURCE=60;
  LOAD_RESOURCE=62;

  EXECUTE=64;

	// SrvMgr
	SRV_MGR=66;


  // Srv --> Cln
  SRV_SHUTDOWN=68;
  SRV_STARTING=70;
  SRV_MESSAGE=72;

  // Inter-Server
  LB_SRV_ONLINE = 80;
  LB_SRV_OFFLINE = 82;
  LB_QRY_IDLE_SRV = 84;
  LB_USER_LOGIN = 86;
  LB_USER_LOGOUT = 88;
  LB_QRY_ONLINE_USERS = 90;
  LB_PUSH_MSG = 92;
  LB_PAYLOAD_FULL = 94;

}

message coordinate
{
  required sint64 x=1;
  required sint64 y=2;
  optional sint64 z=3 [default=0];
}

message attr
{
  required uint32 id=1;
  required string value=2;
}

message object
{
  required sint32 id=1;
  optional uint32 type=2;
  repeated attr attr=3;
}

message action
{
  required object object=1;
  required coordinate coord=2;
  required sint32 type=3;

  optional sint32 toward=4;
  optional uint32 heartbeat=5;
  optional uint64 originalTimer=6;
}

message sap_v4
{
  // IPv4 sap
  required bytes sockaddr_in=1;
}

message sap_v6
{
  // IPv6 sap
  required bytes sockaddr_in6=1;
}

message sap
{
  repeated sap_v4 globalAddr_ipv4=1;
  repeated sap_v4 localAddr_ipv4=2;

  repeated sap_v6 globalAddr_ipv6=3;
  repeated sap_v6 localAddr_ipv6=4;
}

//通信结果，包括通信状态，返回的数据
message status
{
  //请求的消息类型
  required messageType type = 2;

  //执行状态描述
  required string msg = 4;

  //执行状态编号
  optional sint32 code = 6;

  //统一时钟, 以纳秒为单位
  optional bytes tickCntInBytes = 8;

  //附加数据
  optional bytes data = 12;

  //附加数据的条数/数量，如果可以计量
  optional uint32 dataCount=13;
}

//end point
message ep
{
  // IP or Domain name
  required string addr = 1;
  required uint32 port = 2; 
}

//epList multiple ep collection
message epList{
  repeated ep ep=1;
}

message userEP
{
  required string name = 1;
  optional uint32 id = 2;
  optional string pwd = 3;
  optional string token = 4;
  optional ep ep = 5;
}

message servEP
{
  required uint32 maxPayLoad = 1; 
  required uint32 currentPayLoad = 2;
  required ep ep = 3;

  // Name for identify this end point
  // It's generated by server with addr:port
  required string srvName = 4;
  required bool bIsOnLine = 6;
}

//接受消息的对象集合，以组、角色、用户编号为标识
message target
{
  repeated uint32 grpID = 1;
  repeated uint32 roleID = 2;
  repeated uint32 userID = 3;
}

message cmnMsg
{
  optional string id = 1;
  optional string title = 2;
  optional string keywords = 3;
  optional string category = 4;
  optional string content = 5;
  optional target target = 6;

  // Time in milliSeconds from 2012-01-01 00:00:00 000
  // one year is       7,57-B1 2C-00
  // 100 Years is    02-DE,41-35,30-00
  // uint64 is  ,FF-FF,FF-FF,FF-FF,FF-FF
  optional uint64 publishTime = 7;
}

message org
{
  repeated uint32 grp=1;
  repeated uint32 role=2;
}

//目标用户集合
message targets{
  repeated user user=1;
}

message user
{
  required string name=1;

  optional string pwd=2;
  optional uint32 id=3;

  //用户登录的设备标识
  optional string devId = 4;
  optional string nickname=5;

  //用户所属的组
  optional uint32 group=7;

  //用户所属的角色
  optional uint32 role=8;

  optional string registryTime=9;
  optional int64 activeTime=10;
  optional string lastLoginSAP=11;
  optional string email=12;
  optional string gender=13;

  //即时通信账号，如QQ,微信等
  optional string imCode=14;

  //电话
  optional string tele=15;
  
  optional string homeAddr=16;
  optional string officeAddr=17;

  optional string remark=31;
  optional string status=32;

  //用户设备本地侦听所有的IP地址:端口
  repeated ep ep=33;

  //用户公网IP地址:端口
  optional ep globalEP=34;

  //机构
  optional org org=40;

  //证书
  optional string token=42;
}

message LoadBalancingMsg
{
  // srv -> lbsrv, LB_SRV_ONLINE
  optional string name = 1;
  optional string pwd = 2;

  // srv -> lbsrv, LB_PAYLOAD_FULL
  optional servEP senderEP = 3;

  // lbsrv->srv, LB_SRV_ONLINE, LB_QRY_IDLE_SRV
  repeated servEP srvEpList = 4;

  // srv -> lbsrv, LB_USER_LOGIN, LB_USER_LOGOUT
  // lbsrv -> srv, LB_QRY_ONLINE_USERS
  repeated userEP userList = 5;

  // srv <-> lbsrv, LB_PUSH_MSG
  optional cmnMsg msg = 6;

  optional messageType type = 7;
  optional string actionRsl = 8;
}

message msg
{
  //协议签名
	required fixed32 protoSign = 1;

  //协议帧长度
  required fixed32 msgLength = 2;

  //消息类型
  required messageType type=3;
  
  //通信协议级反馈类型: 's': 服务端反馈, 'c': 客户端反馈
  optional string feedbackType=4;

  //消息发出的时间, 以纳秒为单位
  optional uint64 senderTimer=5;

  //数据处理结果, 即request/response中的response
  optional status status=6;

  //发送者
  optional user sender=7;
  
  //后端时钟，用于各端同步需求
  optional uint64 srvTimer=10;

  //根据 messageType对应的协议负载
  optional bytes data=11;

  //service access point
  repeated ep ep=12;

  //接收消息的用户列表
  repeated user userList=13;

  //发送者或要求接收方执行的动作
  repeated action action=15;	
}
